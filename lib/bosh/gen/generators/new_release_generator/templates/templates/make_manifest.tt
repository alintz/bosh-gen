#!/bin/bash

set -e

version_checker() {
	if [[ $1 == $2 ]]
	then
		return 0
	fi
	local IFS=.
	local i actual=($1) expected=($2)
	# fill empty fields in actual with zeros
	for ((i=${#actual[@]}; i<${#expected[@]}; i++))
	do
		actual[i]=0
	done
	actual_numeric=0
	expected_numeric=0
	for ((i=0; i<${#actual[@]}; i++))
	do
		if [[ -z ${expected[i]} ]]
		then
			# fill empty fields in expected with zeros
			expected[i]=0
		fi
		actual_numeric=$((actual_numeric+${actual[i]}*1000**(${#actual[@]}-i)))
		expected_numeric=$((expected_numeric+${expected[i]}*1000**(${#expected[@]}-i)))
	done


	if [[ ${actual_numeric} -lt ${expected_numeric} ]]; then
		return 1
	fi
	return 0
}

required_version="1.8.9"
dev_version=$(spruce -v 2>&1 | perl -pe 's/.*development.*/DEV/')
if [[ ${dev_version} == "DEV" ]]; then
	echo "Treating 'development' version as up-to-date with spruce v${required_version}"
else
	spruce_version=$(spruce -v 2>&1 | perl -pe 's|.*?(\d+\.\d+(\.\d+)*).*|$1|')
	if [[ -z ${spruce_version} || $(echo ${current_version} | egrep '[^0-9\.]') ]]; then
		echo "make_manifest requires spruce version ${required_version} or newer, but the current version could not be parsed: ${spruce_version}"
		exit 1
	fi
	if ! version_checker ${spruce_version} ${required_version}; then
		echo "make_manifest requires spruce version ${required_version} or newer, but found version ${spruce_version}"
		exit
	fi
fi

template_prefix="<%= project_name %>"
STEMCELL_OS=${STEMCELL_OS:-ubuntu}

infrastructure=$1

fail() {
	echo >&2 $*
}

if [[ "$infrastructure" != "aws-ec2" && "$infrastructure" != "warden" ]] ; then
  fail "usage: ./make_manifest <aws-ec2|warden>"
  exit 1
fi

case "${infrastructure}/${STEMCELL_OS}" in
  (warden/*)       STEMCELL_URL="https://bosh.io/d/stemcells/bosh-warden-boshlite-ubuntu-trusty-go_agent" ;;
  (aws-ec2/ubuntu) STEMCELL_URL="https://bosh.io/d/stemcells/bosh-aws-xen-ubuntu-trusty-go_agent" ;;
  (aws-ec2/centos) STEMCELL_URL="https://bosh.io/d/stemcells/bosh-aws-xen-centos-7-go_agent" ;;
  (*)
    fail "Invalid infrastructure or OS specified."
    exit 1
    ;;
esac

shift

BOSH_STATUS=$(bosh status)
DIRECTOR_UUID=$(echo "$BOSH_STATUS" | grep UUID | awk '{print $2}')
DIRECTOR_CPI=$(echo "$BOSH_STATUS" | grep CPI | awk '{print $2}' | sed -e 's/_cpi//')
DIRECTOR_NAME=$(echo "$BOSH_STATUS" | grep Name | sed 's/.*Name *//')
NAME=$template_prefix-$infrastructure

if [[ $DIRECTOR_CPI = "warden" && ${infrastructure} != "warden" ]]; then
  fail "Not targeting bosh-lite with warden CPI. Please make sure you have run 'bosh target' and are targeting a BOSH lite before running this script."
  exit 1
fi

if [[ $infrastructure = "aws-ec2" && ${DIRECTOR_CPI} != "aws" ]]; then
  fail "Not targeting an AWS BOSH. Please make sure you have run 'bosh target' and are targeting an AWS BOSH before running this script."
  exit 1
fi

function latest_uploaded_stemcell {
  echo $(bosh stemcells | grep bosh | grep $STEMCELL_OS | awk -F'|' '{ print $2, $3 }' | sort -nr -k2 | head -n1 | awk '{ print $1 }')
}

STEMCELL=${STEMCELL:-$(latest_uploaded_stemcell)}
if [[ -z ${STEMCELL} ]]; then
  echo
  echo "Uploading latest $DIRECTOR_CPI/$STEMCELL_OS stemcell..."
  echo " (from ${STEMCELL_URL})"
  bosh upload stemcell $STEMCELL_URL
fi
STEMCELL=${STEMCELL:-$(latest_uploaded_stemcell)}

templates=$(dirname $0)
release=$templates/..
tmpdir=$release/tmp

mkdir -p $tmpdir
cat <<EOF > $tmpdir/stub-with-uuid.yml
---
name: ${NAME}
director_uuid: ${DIRECTOR_UUID}
EOF


if [[ $(bosh cloud-config | spruce json | jq -r '.networks[] | select(.name == "<%= project_name %>") | .name') != "<%= project_name %>" ]]; then
	echo >&2 "Your cloud-config does not have the 'haproxy' network in it. See templates/cloud-config-warden.yml for an example."
	exit 1
fi
if [[ $(bosh cloud-config | spruce json | jq -r '.vm_types[] | select(.name == "haproxy") | .name') != "haproxy" ]]; then
	echo >&2 "Your cloud-config does not have the 'haproxy' vm_type in it. See templates/cloud-config-warden.yml for an example."
	exit 1
fi

bosh cloud-config | spruce merge --cherry-pick networks > $tmpdir/cc-networks.yml

if [[ -n "${KEEPALIVED_VIP}" ]]; then
	keepalived=$templates/keepalived.yml
fi

spruce merge --prune meta --prune networks \
  $templates/<%= project_name %>.yml \
  $tmpdir/cc-networks.yml \
  $tmpdir/stub-with-uuid.yml \
  $* > $tmpdir/$NAME-manifest.yml

bosh deployment $tmpdir/$NAME-manifest.yml
bosh status
